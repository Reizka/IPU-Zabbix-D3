<!--
To change this template, choose Tools | Templates
and open the template in the editor.
-->
<!DOCTYPE html>
<html>
    <head>
        <title></title>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <link rel="stylesheet" type="text/css" href="css/main_screen_layout.css" />
        <link rel="stylesheet" type="text/css" href="css/screen_layout_large.css" />
        <script src="http://mbostock.github.com/d3/d3.js?2.7.4"></script>
        <script src="http://mbostock.github.com/d3/d3.geom.js?2.7.4"></script>
        <script src="http://mbostock.github.com/d3/d3.layout.js?2.7.4"></script>
        <script src="http://d3js.org/d3.v3.min.js"></script>
        <script type="text/javascript" src="http://mbostock.github.com/d3/d3.js?2.4.5"></script>
        <script type="text/javascript" src="http://mbostock.github.com/d3/d3.layout.js?2.4.5"></script>
    </head>
    <body>
        <div class="page">
            
            <header> <h1> Seravo new interface</h1> </header>
            <div class="container">
                <div class="top">
                    <script>

                        var margin = {top: 0, right: 50, bottom: 0, left: 0},
                            width = 2800- margin.left - margin.right,
                            height = 800 - margin.top - margin.bottom;

                        var n = 100,
                            m = 4,
                            padding = 6,
                            radius = d3.scale.sqrt().range([15, 30]),
                            color = d3.scale.category10().domain(d3.range(m)),
                            x = d3.scale.ordinal().domain(d3.range(m)).rangeBands([0, width]);

                        var nodes = d3.range(n).map(function() {
                          var i = Math.floor(Math.random() * m),
                              v = (i + 1) / m * -Math.log(Math.random());
                          return {
                            radius: radius(v),
                            color: color(i)
                          };
                        });

                        var svg = d3.select(".top").append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                          .append("g")
                            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                        d3.nest()
                            .key(function(d) { return d.color; })
                            .entries(nodes)
                            .forEach(force);

                        function force(entry, i) {
                          var nodes = entry.values;

                          var force = d3.layout.force()
                              .nodes(nodes)
                              .size([x.rangeBand(), height])
                              .gravity(.2)
                              .charge(0)
                              .on("tick", tick)
                              .start();

                          var circle = svg.append("g")
                              .attr("transform", "translate(" + x(i) + ")")
                            .selectAll("circle")
                              .data(nodes)
                            .enter().append("circle")
                              .attr("r", function(d) { return d.radius; })
                              .style("fill", function(d) { return d.color; })
                              .call(force.drag);

                          function tick(e) {
                            circle
                                .each(collide(.5))
                                .attr("cx", function(d) { return d.x; })
                                .attr("cy", function(d) { return d.y; });
                          }

                          // Resolves collisions between d and all other circles.
                          function collide(alpha) {
                            var quadtree = d3.geom.quadtree(nodes);
                            return function(d) {
                              var r = d.radius + radius.domain()[1] + padding,
                                  nx1 = d.x - r,
                                  nx2 = d.x + r,
                                  ny1 = d.y - r,
                                  ny2 = d.y + r;
                              quadtree.visit(function(quad, x1, y1, x2, y2) {
                                if (quad.point && (quad.point !== d)) {
                                  var x = d.x - quad.point.x,
                                      y = d.y - quad.point.y,
                                      l = Math.sqrt(x * x + y * y),
                                      r = d.radius + quad.point.radius + (d.color !== quad.point.color) * padding;
                                  if (l < r) {
                                    l = (l - r) / l * alpha;
                                    d.x -= x *= l;
                                    d.y -= y *= l;
                                    quad.point.x += x;
                                    quad.point.y += y;
                                  }
                                }
                                return x1 > nx2
                                    || x2 < nx1
                                    || y1 > ny2
                                    || y2 < ny1;
                              });
                            };
                          }
                        }

                    </script> 
                </div>
                <div class="line"></div>
                <div class="bottom">
                    <div class="bottom_left">
                        <script>
                            
                            var data = [75,50,25,5];
                            var r = 150;

                            var color = d3.scale.ordinal()
                                .range(["#34A732", "#2677AF", "#DA2921", "#FE7C0C"]);

                            var canvas = d3.select(".bottom_left").append("svg")
                                .attr("width", 500)
                                .attr("height", 500);

                            var group = canvas.append("g")
                                .attr("transform", "translate(300, 300)");

                            var arc = d3.svg.arc()
                                .innerRadius(50)
                                .outerRadius(r);

                            var pie = d3.layout.pie()
                                .value(function (d){return d;});

                            var arcs = group.selectAll(".arc")
                                .data(pie(data))
                                .enter()
                                .append("g")
                                .attr("class", "arc");

                           arcs.append("path")
                                .attr("d", arc)
                                .attr("fill", function(d) {return color(d.data); });

                           arcs.append("text")
                                .attr("transform", function (d) {return"translate("+ arc.centroid(d)+")"})
                                .attr("text-anchor", "middle")
                                .attr("font-size", "1.5em")
                                .attr("color", "red")
                                .text(function (d) {return d.data; });
                        </script>
                    </div>
                    <div class="bottom_right">
                        <script type="text/javascript">

                            // Define the data as a two-dimensional array of numbers. If you had other
                            // data to associate with each number, replace each number with an object, e.g.,
                            // `{key: "value"}`.
                            var data = [
                              [11975,  5871],
                              [ 1951, 10048],
                              [ 8010, 16145],
                              [ 1013,   990]
                            ];

                            // Define the margin, radius, and color scale. The color scale will be
                            // assigned by index, but if you define your data using objects, you could pass
                            // in a named field from the data object instead, such as `d.name`. Colors
                            // are assigned lazily, so if you want deterministic behavior, define a domain
                            // for the color scale.
                            var m = 10,
                                r = 100,
                                z = d3.scale.category20c();

                            // Insert an svg:svg element (with margin) for each row in our dataset. A
                            // child svg:g element translates the origin to the pie center.
                            var svg = d3.select(".bottom_right").selectAll("svg")
                                .data(data)
                              .enter().append("svg:svg")
                                .attr("width", (r + m) * 2)
                                .attr("height", (r + m) * 2)
                              .append("svg:g")
                                .attr("transform", "translate(" + (r + m) + "," + (r + m) + ")");

                            // The data for each svg:svg element is a row of numbers (an array). We pass
                            // that to d3.layout.pie to compute the angles for each arc. These start and end
                            // angles are passed to d3.svg.arc to draw arcs! Note that the arc radius is
                            // specified on the arc, not the layout.
                            svg.selectAll("path")
                                .data(d3.layout.pie())
                              .enter().append("svg:path")
                                .attr("d", d3.svg.arc()
                                .innerRadius(r / 2)
                                .outerRadius(r))
                                .style("fill", function(d, i) { return z(i); });

                        </script>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
